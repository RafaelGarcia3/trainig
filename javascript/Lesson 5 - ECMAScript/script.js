// importing a module
import { greet } from './module.js';

// let and const
let name = 'Alice';
const age = 30;

// arrow function
const getUserInfo = () => {
  // destructuring assignment
  const { name, age } = user;
  return `Name: ${name}, Age: ${age}`;
};

// spread operator
const user = { name, age, location: 'Wonderland' };
const updatedUser = { ...user, occupation: 'Explorer' };

// class
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  // method using template literals
  introduce() {
    return `Hello, my name is ${this.name} and I am ${this.age} years old.`;
  }
}

// creating an instance of the class
const person = new Person(name, age);

// promise
const fetchData = () => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('Data fetched successfully!');
    }, 5000);
  });
};

// using the promise
fetchData().then((message) => {
  displayResult('Promise Result:', message, 'This shows the result of a promise that resolves after 5 seconds.');
});

// Rest parameters
const sum = (...numbers) => {
    let total = 0;
    for (const num of numbers) {
        total += num;
    }
    return total;
};

displayResult('Sum of numbers:', `${sum(1, 2, 3, 4, 5)}`, 'This calculates the sum of the numbers using rest parameters.'); // Output: 15

// Iterators and generators
function* numberGenerator() {
  let num = 1;
  while (true) {
    yield num++;
  }
}

const iterator = numberGenerator();
displayResult('Iterator value:', `${iterator.next().value}`, 'This shows the first value generated by the iterator.'); // Output: 1
displayResult('Iterator value:', `${iterator.next().value}`, 'This shows the second value generated by the iterator.'); // Output: 2

// Typed Arrays
const typedArray = new Uint8Array([10, 20, 30, 40, 50]);
typedArray.forEach((value) => {
  displayResult('TypedArray value:', `${value}`, 'This shows each value in the typed array.');
});

// Using the imported module function
greet(person.introduce());

// Function to display results on the page with a description
function displayResult(description, message, explanation) {
  const exampleSection = document.querySelector('#example');
  const p = document.createElement('p');
  p.innerHTML = `<strong>${description}</strong> ${message} <br /><em>${explanation}</em>`;
  exampleSection.appendChild(p);
}